#!/usr/bin/env bash
# shellcheck source-path=../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../..")
source "$PKGROOT/.upkg/records.sh/records.sh"

VARIANT=$(systemctl show-environment | grep '^VARIANT=')
VARIANT=${VARIANT#VARIANT=}

main() {
  DOC="phxc-rpi - Manage RaspberryPI secure-boot & disk-encryption
Usage:
  phxc-rpi otp init
  phxc-rpi secureboot (enable|disable|persist|status [PROPERTY...])
"
# docopt parser below, refresh this parser with `docopt.sh phxc-rpi`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:154};usage=${DOC:60:94}
digest=b009e;options=();node_0(){ value PROPERTY a true;};node_1(){ switch otp \
a:otp;};node_2(){ switch init a:init;};node_3(){ switch secureboot a:secureboot
};node_4(){ switch enable a:enable;};node_5(){ switch disable a:disable;}
node_6(){ switch persist a:persist;};node_7(){ switch status a:status;}
node_8(){ sequence 1 2;};node_9(){ sequence 3 10;};node_10(){ choice 4 5 6 11;}
node_11(){ sequence 7 12;};node_12(){ optional 13;};node_13(){ repeatable 0;}
node_14(){ choice 8 9;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" \
"$1" >&2;printf "%s\n" "${DOC:60:94}" >&2;exit 1;}';local varnames=(PROPERTY \
otp init secureboot enable disable persist status) varname;for varname in \
"${varnames[@]}"; do unset "var_$varname";done;parse 14 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;if declare -p var_PROPERTY >/dev/null 2>&1; then eval $p'PROPERTY=("${var'\
'_PROPERTY[@]}")';else eval $p'PROPERTY=()';fi;eval $p'otp=${var_otp:-false};'\
$p'init=${var_init:-false};'$p'secureboot=${var_secureboot:-false};'$p'enable='\
'${var_enable:-false};'$p'disable=${var_disable:-false};'$p'persist=${var_pers'\
'ist:-false};'$p'status=${var_status:-false};';local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' phxc-rpi`
  eval "$(docopt "$@")"

  # Bootloader timestamp: date -d "@$(printf "%d\n" "0x$(xxd -p </sys/firmware/devicetree/base/chosen/bootloader/update-timestamp)")"

  # shellcheck disable=SC2154
  if $otp && $init; then
    if rpi-otp-private-key -c -o 0 -l 8; then
      warning "RPi OTP is already initialized"
    else
      type openssl &>/dev/null || fatal "openssl not found"
      local key
      key=$(openssl rand -hex 32)
      rpi-otp-private-key -o 0 -l 8 -w "$key"
      info "32 random bytes have been permanently written to the RPi OTP"
    fi
  elif $secureboot; then
    declare -A sbstate
    sbstate[signed-boot]=false
    sbstate[devkey-revoked]=false
    sbstate[otp-pubkey-written]=false

    local sbstate_path=/sys/firmware/devicetree/base/chosen/bootloader/signed
    if [[ -e $sbstate_path ]]; then
      local sbstate_raw
      sbstate_raw=0x$(xxd -p $sbstate_path)
      (( (sbstate_raw & (1 <<0)) == 0 )) || sbstate[signed-boot]=true
      (( (sbstate_raw & (1 <<2)) == 0 )) || sbstate[devkey-revoked]=true
      (( (sbstate_raw & (1 <<3)) == 0 )) || sbstate[otp-pubkey-written]=true
    fi
    if $status; then
      # shellcheck disable=SC2206
      [[ ${#PROPERTY} -gt 0 ]] || PROPERTY=(${!sbstate[@]})
      local property ret=0
      for property in "${PROPERTY[@]}"; do
        if [[ -z ${sbstate[$property]} ]]; then
          warning "Unknown secureboot property: %s" "$property"
          ret=1
          continue
        fi
        if ${sbstate[$property]}; then
          printf "%-19s yes\n" "${property}:"
        else
          printf "%-19s no\n" "${property}:"
          # Exit with $?=2 to indicate "no", though only if no other error has occurred
          [[ $ret != 0 ]] || ret=2
        fi
      done
      return $ret
    elif $enable; then
      flash_image /usr/local/lib/phxc/pieeprom.unsigned-bootcode.bin
      info "The RPi has been updated with a signed bootloader that requires secureboot"
    elif $disable; then
      flash_image /usr/local/lib/phxc/pieeprom.orig.bin
      info "The RPi has been updated with a bootloader that does not require secureboot"
    fi
  fi
}

# Source: https://github.com/raspberrypi/rpi-eeprom/blob/3a16bd016f533877079c3bfad188539abd31fb8a/rpi-eeprom-update
flash_image() {
  local img=$1 try=0 freq=16000 spidev
  case "$VARIANT" in
    rpi4) spidev=/dev/spidev0.0 ;;
    rpi5) spidev=/dev/spidev10.0 ;;
    *) fatal "Unsupported variant: %s" "$VARIANT" ;;
  esac
  flashrom -p linux_spi:dev=$spidev,spispeed=$freq 2>&1 | LOGPROGRAM=step pipe_verbose || \
    fatal "Flashrom probe of %s failed, run with LOGLEVEL=verbose to see flashrom output" "$spidev"
  # If flashrom fails then retry at a lower speed.
  while ((++try <= 5)); do
    info "Flashing %s" "$img"
    if flashrom -p linux_spi:dev=$spidev,spispeed=$freq -w "$img" | LOGPROGRAM=step pipe_verbose; then
      info "Verifying update"
      if flashrom -p linux_spi:dev=${spidev},spispeed=${freq} -v "$img" | LOGPROGRAM=step pipe_verbose; then
        return 0
      else
        warning "Failed to verify the flashed image"
      fi
    else
        warning "Failed to flash the image"
    fi
    # Try at a lower speed
    freq=8000
  done
  fatal "Failed to flash the image after %d tries" $try
}

main "$@"
