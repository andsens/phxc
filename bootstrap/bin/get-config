#!/usr/bin/env bash
# shellcheck source-path=../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"
  DOC="get-config - Retrieve phxc config values
Usage:
  get-config [-qD] CFGNAME KEY

Options:
  -q --quiet       No error message if file or setting is missing
  -D --no-default  Don't use the default if file or setting is missing
"
# docopt parser below, refresh this parser with `docopt.sh get-config`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:225};usage=${DOC:41:37}
digest=7cbfc;options=('-q --quiet 0' '-D --no-default 0');node_0(){ switch \
__quiet 0;};node_1(){ switch __no_default 1;};node_2(){ value CFGNAME a;}
node_3(){ value KEY a;};node_4(){ optional 0 1;};node_5(){ sequence 4 2 3;}
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:41:37}" >&2;exit 1;}';local varnames=(__quiet __no_default CFGNAME KEY) \
varname;for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 5 \
"$@";local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;eval $p'__quiet=${var___quiet:-false};'$p'__no_default=${var'\
'___no_default:-false};'$p'CFGNAME=${var_CFGNAME:-};'$p'KEY=${var_KEY:-};'
local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' get-config`
  eval "$(docopt "$@")"
  local use_default=false default
  # shellcheck disable=SC2154
  $__no_default || use_default=true
  local configpath=/efi/phxc/$CFGNAME.json
  if [[ -e $configpath ]]; then
    if jq -r 'paths | join(".")' "$configpath" | grep -q "^$KEY$"; then
      debug "Getting value of '%s' in '%s'" "$KEY" "$configpath"
      key=$(escape_key "$KEY")
      jq -r ".$key" "$configpath"
    elif $use_default && default=$(get_default "$CFGNAME.json" "$key"); then
      verbose "Key '%s' is not set in '%s', using default ('%s')" "$KEY" "$configpath" "$default"
      printf "%s\n" "$default"
    else
      # shellcheck disable=SC2154
      if $__quiet; then
        verbose "'%s' is not set in '%s'" "$KEY" "$configpath"
      else
        fatal "'%s' is not set in '%s'" "$KEY" "$configpath"
      fi
      return 1
    fi
  elif $use_default && default=$(get_default "$CFGNAME.json" "$KEY"); then
    printf "%s\n" "$default"
  else
    $__quiet || fatal "%s does not exist" "$configpath"
     return 1
  fi
}

get_default() {
  local basename=$1 key=$2 defaults_path
  defaults_path=$PKGROOT/lib/defaults/$basename
  if jq -r 'paths | join(".")' "$defaults_path" | grep -q "^$KEY$"; then
    key=$(escape_key "$KEY")
    jq -r ".$key" "$defaults_path"
  else
    return 1
  fi
}

escape_key() {
  # Converts any path like some-path.to-something.here
  # into ["some-path"]["to-something"]["here"]
  # This means dots in keys are not allowed
  local key=$1
  key=${key//'.'/'"]["'}
  key="[\"$key\"]"
  printf "%s\n" "$key"
}

main "$@"
