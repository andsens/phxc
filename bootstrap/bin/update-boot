#!/usr/bin/env bash
# shellcheck source-path=../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../..")
source "$PKGROOT/.upkg/records.sh/records.sh"

VARIANT=$(systemctl show-environment | grep '^VARIANT=')
VARIANT=${VARIANT#VARIANT=}
DATA_UUID=$(systemctl show-environment | grep '^DATA_UUID=')
DATA_UUID=${DATA_UUID#DATA_UUID=}

main() {
  DOC="update-boot - Update the efi partition with a new image
Usage:
  update-boot [-r]

Options:
  -r --reboot  Reboot into the new image after updating
"
# docopt parser below, refresh this parser with `docopt.sh update-boot`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:147};usage=${DOC:56:25}
digest=4ef0d;options=('-r --reboot 0');node_0(){ switch __reboot 0;};node_1(){
optional 0;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:56:25}" >&2;exit 1;}';local varnames=(__reboot) varname
for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 1 "$@"
local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;eval $p'__reboot=${var___reboot:-false};';local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do
for varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' update-boot`
  eval "$(docopt "$@")"

  local meta_json_new http_code
  if ! meta_json_new=$(curl-imgreg "$VARIANT/meta.json" -w '%{http_code}'); then
    info "Unable to retrieve image metadata from image-registry"
    return 1
  fi
  http_code=$(tail -n1 <<<"$meta_json_new")
  if [[ $http_code = 404 ]]; then
    info "No image has been built for the variant '%s' yet" "$VARIANT"
    return 0
  fi
  if [[ $http_code != 200 ]]; then
    info "Unable to retrieve image metadata from image-registry (HTTP response code %s)" "$http_code"
    return 1
  fi
  meta_json_new=$(head -n-1 <<<"$meta_json_new")
  local current_rootimg_sha256 pending_rootimg_sha256 failed_rootimg_sha256 new_rootimg_sha256
  current_rootimg_sha256=$(cat /run/initramfs/root.img.sha256)
  pending_rootimg_sha256=$(cat /efi/phxc/pending.sha256 2>/dev/null || true)
  failed_rootimg_sha256=$(cat /efi/phxc/failed.sha256 2>/dev/null || true)
  new_rootimg_sha256=$(jq -re '.sha256sums["root.img"]' <<<"$meta_json_new")
  if [[ $new_rootimg_sha256 = "$current_rootimg_sha256" ]]; then
    info "System is up-to-date and image is currently running (%s)" "${current_rootimg_sha256:0:8}"
    return 0
  elif [[ $new_rootimg_sha256 = "$pending_rootimg_sha256" ]]; then
    # shellcheck disable=SC2154
    if $__reboot; then
      info "System is outdated (%s), a newer boot image (%s) will be tried on next boot" "${current_rootimg_sha256:0:8}" "${pending_rootimg_sha256:0:8}"
      cordoned-reboot -t
    else
      info "System is outdated (%s), a newer boot image (%s) has been downloaded and is ready to be tried out" "${current_rootimg_sha256:0:8}" "${pending_rootimg_sha256:0:8}"
    fi
    return 0
  elif [[ $new_rootimg_sha256 = "$failed_rootimg_sha256" ]]; then
    info "System is outdated (%s) but the newer boot image (%s) failed to boot" "${current_rootimg_sha256:0:8}" "${failed_rootimg_sha256:0:8}"
    return 0
  fi
  info "System is outdated (%s), updating now (%s)" "${current_rootimg_sha256:0:8}" "${new_rootimg_sha256:0:8}"
  clean_update_boot_files() {
    [[ ! -e /efi/phxc/pending.sha256 ]] || rm -f "/efi/phxc/root.$(cat /efi/phxc/pending.sha256).img"
    rm -f /efi/tryboot.img /efi/EFI/Linux/uki.try.efi /efi/phxc/pending.sha256
  }
  trap "clean_update_boot_files" EXIT
  printf "%s\n" "$new_rootimg_sha256" >/efi/phxc/pending.sha256
  curl-imgreg "$VARIANT/root.img" -o"/efi/phxc/root.$new_rootimg_sha256.img" -f

  if [[ $VARIANT = rpi* ]]; then
    if ! rpi-otp-private-key -c -o 0; then
      warning "RPi OTP is not initialized or not supported, using disk-encryption with a static password"
      curl-imgreg "$VARIANT/boot.empty-pw.img" -o/efi/tryboot.img -f
      curl-imgreg "$VARIANT/boot.empty-pw.sig" -o/efi/tryboot.sig -f
    else
      mkdir -p /run/cryptsetup-keys.d
      rpi-otp-disk-encryption-key /run/cryptsetup-keys.d/data.key
      cryptsetup luksOpen --test-passphrase --key-file /run/cryptsetup-keys.d/data.key "/dev/disk/by-partuuid/${DATA_UUID}" &>/dev/null || \
        cryptsetup luksAddKey --key-file /var/lib/phxc/disk-encryption.recovery.key \
          "/dev/disk/by-partuuid/${DATA_UUID}" /run/cryptsetup-keys.d/data.key
      curl-imgreg "$VARIANT/boot.rpi-otp.img" -o/efi/tryboot.img -f
      curl-imgreg "$VARIANT/boot.rpi-otp.sig" -o/efi/tryboot.sig -f
    fi
  else
    if ! compgen -G '/sys/kernel/security/tpm*' &>/dev/null; then
      warning "No TPM available, using disk-encryption with a static password"
      curl-imgreg "$VARIANT/uki.empty-pw.efi" -o/efi/EFI/BOOT/BOOT.TRY.EFI -f
    else
      curl-imgreg "$VARIANT/uki.tpm2.efi" -o/efi/EFI/BOOT/BOOT.TRY.EFI -f
      cryptenroll-uki --device "/dev/disk/by-partuuid/${DATA_UUID}" \
        /var/lib/phxc/disk-encryption.recovery.key /efi/EFI/BOOT/BOOT.TRY.EFI
    fi
  fi
  trap "" EXIT
  if $__reboot; then
    info "The boot image has been updated (%s) and will be tried on next boot" "${new_rootimg_sha256:0:8}"
    cordoned-reboot -t
  else
    info "The boot image has been updated (%s) but will not be tried on next boot" "${new_rootimg_sha256:0:8}"
  fi
}

main "$@"
