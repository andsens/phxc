#!/usr/bin/env bash
# shellcheck source-path=../../../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=/usr/local/lib/upkg/.upkg/phxc
source "$PKGROOT/.upkg/records.sh/records.sh"

VARIANT=$(systemctl show-environment | grep '^VARIANT=')
VARIANT=${VARIANT#VARIANT=}

main() {
  DOC="cordoned-reboot - Exclusively cordon & drain the node, then reboot
Usage:
  cordoned-reboot [-t]

Options:
  -t --try  Attempt to reboot into the new image
"
# docopt parser below, refresh this parser with `docopt.sh cordoned-reboot`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:155};usage=${DOC:67:29}
digest=ea915;options=('-t --try 0');node_0(){ switch __try 0;};node_1(){
optional 0;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:67:29}" >&2;exit 1;}';local varnames=(__try) varname;for \
varname in "${varnames[@]}"; do unset "var_$varname";done;parse 1 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'__try=${var___try:-false};';local docopt_i=1;[[ $BASH_VERSION =~ \
^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in \
"${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' cordoned-reboot`
  eval "$(docopt "$@")"
  # Kubernetes leases would be the best to use but the admission controller for
  # nodes seems to block all except one lease (nodename in kube-node-leases)
  # Instead we use the unschedulable state as a mutex. Though that introduces
  # a bit of a race condition. To work around that we simply check a second time
  # after cordoning the node
  if [[ $(other_unschedulable_nodes | wc -l) -gt 0 ]]; then
    info "Delaying restart, there are nodes that are unschedulable:\n%s" "$(other_unschedulable_nodes)"
    return 0
  fi
  kubectl cordon "$HOSTNAME"
  if [[ $(other_unschedulable_nodes | wc -l) -gt 0 ]]; then
    kubectl uncordon "$HOSTNAME"
    info "Delaying restart, there are nodes that are unschedulable:\n%s" "$(other_unschedulable_nodes)"
    return 0
  fi
  # shellcheck disable=SC2064
  trap "kubectl uncordon \"$HOSTNAME\"" EXIT
  if ! kubectl drain --ignore-daemonsets --delete-emptydir-data --timeout 120s "$HOSTNAME"; then
    warning "Draining with eviction failed after 2 minutes, now draining without eviction"
    kubectl drain --ignore-daemonsets --delete-emptydir-data --disable-eviction  "$HOSTNAME"
  fi
  info "Node drained, rebooting in 5 seconds"
  if [[ $VARIANT = rpi* ]]; then
    # shellcheck disable=SC2154
    if $__try; then
      systemd-run --on-active=5 --timer-property=AccuracySec=0 /usr/sbin/reboot "0 tryboot"
    else
      systemd-run --on-active=5 --timer-property=AccuracySec=0 /usr/sbin/reboot
    fi
  else
    if $__try; then
      efi-bootentry bootnext /efi/EFI/BOOT/BOOT.TRY.EFI
    fi
    systemd-run --on-active=5 --timer-property=AccuracySec=0 /usr/bin/systemctl reboot
  fi
  trap "" EXIT
}

other_unschedulable_nodes() {
  kubectl get node -ojson | jq -re --arg hostname "$HOSTNAME" \
    '.items[] | select(.spec.unschedulable and .metadata.labels["kubernetes.io/hostname"] != $hostname) | .metadata.labels["kubernetes.io/hostname"]'
}

main "$@"
