#!/usr/bin/env bash
# shellcheck source-path=../../../../..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=/usr/local/lib/upkg/.upkg/phxc
source "$PKGROOT/.upkg/records.sh/records.sh"

case "${VARIANT:?}" in
  amd64) EFI_ARCH=x64 ;;
  arm64) EFI_ARCH=aa64 ;;
  *) fatal "Unknown variant: %s" "$VARIANT" ;;
esac

main() {
  DOC="update-boot - Update the boot partition with a new image
Usage:
  update-boot update [-R]
  update-boot switch

Options:
  -R --no-reboot  Do not reboot after updating
"
# docopt parser below, refresh this parser with `docopt.sh update-boot`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:167};usage=${DOC:57:53}
digest=c02fd;options=('-R --no-reboot 0');node_0(){ switch __no_reboot 0;}
node_1(){ switch update a:update;};node_2(){ switch switch a:switch;};node_3(){
sequence 1 4;};node_4(){ optional 0;};node_5(){ choice 3 2;};cat <<<' \
docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:57:53}" >&2;exit 1;}';local varnames=(__no_reboot update switch) varname
for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 5 "$@"
local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;eval $p'__no_reboot=${var___no_reboot:-false};'$p'update=${v'\
'ar_update:-false};'$p'switch=${var_switch:-false};';local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' update-boot`
  eval "$(docopt "$@")"
  # shellcheck disable=SC2154
  if $update; then
    local reboot=false
    $__no_reboot || reboot=true
    update $reboot
  elif $switch; then
    switch
  fi
}

update() {
  local reboot=$1 meta_json_new http_code
  if ! meta_json_new=$(curl_img_reg "$VARIANT/meta.json" -w '%{http_code}'); then
    info "Unable to retrieve image metadata from image-registry"
    return 1
  fi
  http_code=$(tail -n1 <<<"$meta_json_new")
  if [[ $http_code = 404 ]]; then
    info "No image has been built for the variant '%s' yet" "$VARIANT"
    return 0
  fi
  if [[ $http_code != 200 ]]; then
    info "Unable to retrieve image metadata from image-registry (HTTP response code %s)" "$http_code"
    return 1
  fi
  meta_json_new=$(head -n-1 <<<"$meta_json_new")
  local current_rootimg_sha256 try_rootimg_sha256 new_rootimg_sha256
  current_rootimg_sha256=$(cat /run/initramfs/root.img.sha256)
  try_rootimg_sha256=$(cat /boot/phxc/try.sha256 2>/dev/null || true)
  new_rootimg_sha256=$(jq -re '.sha256sums["root.img"]' <<<"$meta_json_new")
  if [[ $current_rootimg_sha256 = "$new_rootimg_sha256" ]]; then
    info "boot partition is up-to-date (image is currently running)"
    return 0
  fi
  if [[ $try_rootimg_sha256 = "$new_rootimg_sha256" ]]; then
    if [[ -e /run/initramfs/try-reboot ]]; then
      info "boot partition is up-to-date (newer image will be tried)"
      ! $reboot || try_reboot
    else
      info "boot partition is up-to-date (newer image failed to boot)"
    fi
    return 0
  fi
  info "boot partition is outdated, updating now"
  clean_update_boot_files
  # shellcheck disable=SC2064
  trap "clean_update_boot_files" EXIT
  printf "%s" "$new_rootimg_sha256" >/boot/phxc/try.sha256
  curl_img_reg "$VARIANT/root.img" -o"/boot/phxc/root.${new_rootimg_sha256}.img" -f
  if [[ $VARIANT = rpi* ]]; then
    curl_img_reg "$VARIANT/boot.img" -o/boot/tryboot.img -f
  else
    curl_img_reg "$VARIANT/uki.efi" -o/boot/EFI/Linux/uki.try.efi -f
    # Always update shim, mokmanager, and systemd-boot in case they have been updated (or systemd-boot has been signed)
    # Haven't thought of a way to automatically fix them if an update is bungled though
    curl_img_reg "$VARIANT/shim.efi" -o/boot/phxc/shim.efi.tmp -f
    curl_img_reg "$VARIANT/mm.efi" -o/boot/phxc/mm.efi.tmp -f
    curl_img_reg "$VARIANT/systemd-boot.efi" -o/boot/phxc/systemd-boot.efi.tmp -f
    mv /boot/phxc/shim.efi.tmp /boot/EFI/BOOT/BOOT${EFI_ARCH^^}.efi
    mv /boot/phxc/mm.efi.tmp /boot/EFI/BOOT/mm${EFI_ARCH^^}.efi
    mv /boot/phxc/systemd-boot.efi.tmp /boot/EFI/BOOT/grub${EFI_ARCH^^}.efi
  fi
  info "boot partition has been updated"
  trap '' EXIT
  ! $reboot || try_reboot
}

clean_update_boot_files() {
  rm -f \
    /run/initramfs/try-reboot \
    /boot/phxc/try.sha256 \
    /boot/phxc/root.try.img \
    /boot/EFI/Linux/uki.try.efi \
    /boot/tryboot.img \
    /boot/phxc/shim.efi.tmp \
    /boot/phxc/mm.efi.tmp \
    /boot/phxc/systemd-boot.efi.tmp
}

try_reboot() {
  touch /run/initramfs/try-reboot
  # Kubernetes leases would be the best to use but the admission controller for
  # nodes seems to block all except one lease (nodename in kube-node-leases)
  # Instead we use the unschedulable state as a mutex. Though that introduces
  # a bit of a race condition. To work around that we simply check a second time
  # after cordoning the node
  if [[ $(other_unschedulable_nodes | wc -l) -gt 0 ]]; then
    info "Delaying restart, there are nodes that are unschedulable:\n%s" "$(other_unschedulable_nodes)"
    return 0
  fi
  kubectl cordon "$HOSTNAME"
  if [[ $(other_unschedulable_nodes | wc -l) -gt 0 ]]; then
    kubectl uncordon "$HOSTNAME"
    info "Delaying restart, there are nodes that are unschedulable:\n%s" "$(other_unschedulable_nodes)"
    return 0
  fi
  if ! kubectl drain --ignore-daemonsets --delete-emptydir-data --timeout 120s "$HOSTNAME"; then
    warning "Draining with eviction failed after 2 minutes, now draining without eviction"
    kubectl drain --ignore-daemonsets --delete-emptydir-data --disable-eviction  "$HOSTNAME"
  fi
  info "Node drained, rebooting in 5 seconds"
  if [[ $VARIANT = rpi* ]]; then
    systemd-run --on-active=5 --timer-property=AccuracySec=0 /usr/sbin/reboot "0 tryboot"
  else
    bootctl set-oneshot uki.try.efi
    systemd-run --on-active=5 --timer-property=AccuracySec=0 /usr/bin/systemctl reboot
  fi
}

switch() {
  local current_rootimg_sha256 try_rootimg_sha256
  current_rootimg_sha256=$(cat /run/initramfs/root.img.sha256)
  try_rootimg_sha256=$(cat /boot/phxc/try.sha256 2>/dev/null || true)
  if [[ $current_rootimg_sha256 = "$try_rootimg_sha256" ]]; then
    info "Successfully booted new image"
    if [[ $VARIANT = rpi* ]]; then
      mv /boot/tryboot.img /boot/boot.img
    else
      mv /boot/EFI/Linux/uki.try.efi /boot/EFI/Linux/uki.efi
    fi
    local rootimg
    for rootimg in /boot/phxc/root.*.img; do
      [[ $rootimg = /boot/phxc/root.$try_rootimg_sha256.img ]] || rm "$rootimg"
    done
    rm /boot/phxc/try.sha256
  else
    error "Failed to boot new image"
    rm -f /boot/tryboot.img /boot/EFI/Linux/uki.try.efi "/boot/phxc/root.$try_rootimg_sha256.img"
    # Don't remove try.sha256, it prevents update-boot from retrying this specific image
  fi
}

other_unschedulable_nodes() {
  kubectl get node -ojson | jq -re --arg hostname "$HOSTNAME" \
    '.items[] | select(.spec.unschedulable and .metadata.labels["kubernetes.io/hostname"] != $hostname) | .metadata.labels["kubernetes.io/hostname"]'
}

curl_img_reg() {
  local path=$1
  shift
  curl --cacert /var/lib/rancher/k3s/server/tls/server-ca.crt \
    -L --no-progress-meter --connect-timeout 5 \
    --retry 10 --retry-delay 60 --retry-all-errors \
    "https://image-registry.phxc.svc.cluster.local:8020/$path" "$@"
}

main "$@"
