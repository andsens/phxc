#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

main() {
  source "$PKGROOT/.upkg/records.sh/records.sh"

  DOC="workload - Manage workloads
Usage:
  workload apply WORKLOAD...
  workload build WORKLOAD...
  workload delete WORKLOAD...

Note:
  WORKLOAD is a path relative to /workloads e.g. cert-manager
"
# docopt parser below, refresh this parser with `docopt.sh workload`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:191};usage=${DOC:28:94}
digest=ca911;options=();node_0(){ value WORKLOAD a true;};node_1(){ switch \
apply a:apply;};node_2(){ switch build a:build;};node_3(){ switch delete \
a:delete;};node_4(){ sequence 1 5;};node_5(){ repeatable 0;};node_6(){
sequence 2 5;};node_7(){ sequence 3 5;};node_8(){ choice 4 6 7;};cat <<<' \
docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:28:94}" >&2;exit 1;}';local varnames=(WORKLOAD apply build delete) \
varname;for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 8 \
"$@";local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;if declare -p var_WORKLOAD >/dev/null 2>&1; then eval $p'WOR'\
'KLOAD=("${var_WORKLOAD[@]}")';else eval $p'WORKLOAD=()';fi;eval $p'apply=${va'\
'r_apply:-false};'$p'build=${var_build:-false};'$p'delete=${var_delete:-false}'\
';';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' workload`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2154
  if ! $build && ! kubectl -n default get svc kubernetes -o jsonpath='{.status}' >/dev/null; then
    fatal "Unable to connect to the cluster"
  fi

  local workload_name workload_data
  # shellcheck disable=2153
  for workload_name in "${WORKLOAD[@]}"; do
    workload_data=$(kustomize build --enable-alpha-plugins --enable-exec "$PKGROOT/workloads/$workload_name")
    # shellcheck disable=2154
    if $apply; then
      info "Applying %s" "$workload_name"
      kubectl apply --timeout=5m -f - <<<"$workload_data"
    elif $delete; then
      info "Deleting %s" "$workload_name"
      kubectl delete --timeout=5m -f - <<<"$workload_data"
    elif $build; then
      info "Building %s" "$workload_name"
      [[ $workload_data = $'---\n'* ]] || workload_data=$'---\n'$workload_data
      printf "%s\n" "$workload_data"
    fi
  done
}

main "$@"
