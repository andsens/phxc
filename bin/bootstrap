#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
source "$PKGROOT/.upkg/records.sh/records.sh"
source "$PKGROOT/.upkg/trap.sh/trap.sh"
export DOCKER_CLI_HINTS=false
DISK_UTILS_IMG=${DISK_UTILS_IMG:-ghcr.io/andsens/phxc-disk-utils:sha-4863c94}

main() {
  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap [options] VARIANT

Options:
  --setup-admin PATH  Embed admin credentials from cluster.json in root image
  --images PATH  Output & temporary directory [default: <PROJECT-ROOT>/images]
  --no-sb   Do not sign the UKI with secureboot certificate if present
  --debug   Enable debug build (installs debug tools, no artifact cleanup, etc.)

Supported variants:
  amd64 - x86 64-bit image
  arm64 - ARM 64-bit image
  rpi5  - ARM 64-bit image with modifications for Raspberry PI 5
"
# docopt parser below, refresh this parser with `docopt.sh bootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:524};usage=${DOC:29:36}
digest=4e89d;options=(' --setup-admin 1' ' --images 1' ' --no-sb 0' ' --debug '\
'0');node_0(){ value __setup_admin 0;};node_1(){ value __images 1;};node_2(){
switch __no_sb 2;};node_3(){ switch __debug 3;};node_4(){ value VARIANT a;}
node_5(){ optional 0 1 2 3;};node_6(){ sequence 5 4;};cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:29:36}" >&2;exit 1;}'
local varnames=(__setup_admin __images __no_sb __debug VARIANT) varname;for \
varname in "${varnames[@]}"; do unset "var_$varname";done;parse 6 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'__setup_admin=${var___setup_admin:-};'$p'__images=${var___images:'\
'-'"'"'<PROJECT-ROOT>/images'"'"'};'$p'__no_sb=${var___no_sb:-false};'$p'__deb'\
'ug=${var___debug:-false};'$p'VARIANT=${var_VARIANT:-};';local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' bootstrap`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2154
  local DEBUG=$__debug
  ! $DEBUG || LOGLEVEL=${LOGLEVEL:-verbose}
  case $VARIANT in
    amd64) PLATFORM=linux/amd64 ;;
    arm64|rpi*) PLATFORM=linux/arm64 ;;
    *) fatal "Unknown variant: %s" "$VARIANT" ;;
  esac

  local bundle_ctx
  bundle_ctx=$(mktemp -d --suffix '-phxc-node-bundle-ctx')
  trap_append "rm -rf \"$bundle_ctx\"" EXIT
  "$PKGROOT/bootstrap/scripts/bundle.sh" "$bundle_ctx/bundle.tar.gz"

  # Files that will be added through COPY operations after all tasks have run
  # These files cannot be modified while anything is running since they are
  # either r/o (/etc/hosts, /etc/fstab) or would kill dns resolution (/etc/resolv.conf)
  local root_post_ctx
  root_post_ctx=$(mktemp -d --suffix '-phxc-node-root-post-ctx')
  cp -r "$PKGROOT/bootstrap/root.post/." "$root_post_ctx"
  # Special handling for the BOOT_UUID placeholder in fstab
  # shellcheck disable=SC2016
  BOOT_UUID=$BOOT_UUID envsubst '${BOOT_UUID}' <"$PKGROOT/bootstrap/root.post/etc/fstab" >"$root_post_ctx/etc/fstab"

  local main_ctx
  main_ctx=$(mktemp -d --suffix '-phxc-node-main-ctx')
  cp "$PKGROOT/lib/common-context/setup-upkg.sh" "$main_ctx"

  local admin_ctx
  admin_ctx=$(mktemp -d --suffix '-phxc-node-admin-ctx')
  if [[ -n $__setup_admin ]]; then
    trap_append "rm -rf \"$admin_ctx\"" EXIT
    # cp /home/admin/.ssh/authorized_keys "$admin_ctx/authorized_keys"
    jq -r '.admin.sshkeys[]' "$__setup_admin" >"$admin_ctx/authorized_keys"
    # pwhash=$(grep -m1 admin /workspace/admin-credentials/shadow 2>/dev/null | cut -d: -f2)
    jq -r .admin.pwhash "$__setup_admin" >"$admin_ctx/pwhash"
  fi

  local sb_ctx
  sb_ctx=$(mktemp -d --suffix '-phxc-node-sb-ctx')
  trap_append "rm -rf \"$sb_ctx\"" EXIT
  # shellcheck disable=SC2154
  if ! $__no_sb; then
    # kubectl -n phxc get secret secureboot -ojsonpath='{.data.tls\.key}' | base64 -d
    # kubectl -n phxc get secret secureboot -ojsonpath='{.data.tls\.crt}' | base64 -d
    [[ ! -e $HOME/.config/phxc/secureboot.key ]] || cp --preserve=mode "$HOME/.config/phxc/secureboot.key" "$sb_ctx/tls.key"
    [[ ! -e $HOME/.config/phxc/secureboot.crt ]] || cp --preserve=mode "$HOME/.config/phxc/secureboot.crt" "$sb_ctx/tls.crt"
  fi

  buildx build \
    --platform "$PLATFORM" \
    --build-arg "DEBUG=$DEBUG" \
    --build-arg "VARIANT=$VARIANT" \
    --build-arg "LOGLEVEL=$LOGLEVEL" \
    --build-arg "DISK_UTILS_IMG=$DISK_UTILS_IMG" \
    --build-arg "CHOWN=$UID" \
    --build-context bundle="$bundle_ctx" \
    --build-context root.post="$root_post_ctx" \
    --build-context admin="$admin_ctx" \
    --build-context secureboot="$sb_ctx" \
    --file "$PKGROOT/bootstrap/node.Dockerfile" \
    --tag "cluster.local/node:$VARIANT" \
    "$main_ctx"

  # shellcheck disable=SC2154
  [[ $__images != '<PROJECT-ROOT>/images' ]] || __images=$PKGROOT/images
  local artifacts
  artifacts=$__images/$VARIANT.tmp
  rm -rf "$artifacts"
  mkdir -p "$artifacts"
  $DEBUG || trap_append "rm -rf \"$artifacts\"" EXIT

  local container_id
  container_id=$(docker create "cluster.local/node:$VARIANT")
  trap_append "docker rm -v \"$container_id\"" EXIT
  docker cp "$container_id:/artifacts/." "$artifacts"

  rm -rf "$__images/$VARIANT.old"
  [[ ! -e "$__images/$VARIANT" ]] || mv "$__images/$VARIANT" "$__images/$VARIANT.old"
  mv "$artifacts" "$__images/$VARIANT"
}

main "$@"
