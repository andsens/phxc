#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
source "$PKGROOT/.upkg/records.sh/records.sh"
source "$PKGROOT/.upkg/trap.sh/trap.sh"
export DOCKER_CLI_HINTS=false
DISK_UTILS_IMG=${DISK_UTILS_IMG:-ghcr.io/andsens/phxc-disk-utils:sha-4863c94}

main() {
  DOC="bootstrap - Bootstrap images
Usage:
  bootstrap [options] VARIANT

Options:
  --setup-admin PATH  Embed admin credentials from cluster.json in root image
  --resume  Resume failed create-boot-image run, reuse VARIANT.tmp
  --no-sb  Do not sign the UKI with secureboot certificate if present
  --debug  Enable debug build (installs debug tools, no artifact cleanup, etc.)

Supported variants:
  amd64 - x86_64 image
  arm64 - ARM 64-bit image
  rpi5 - ARM 64-bit image with modifications for Raspberry PI 5
"
# docopt parser below, refresh this parser with `docopt.sh bootstrap`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:505};usage=${DOC:29:36}
digest=2c6f2;options=(' --setup-admin 1' ' --resume 0' ' --no-sb 0' ' --debug '\
'0');node_0(){ value __setup_admin 0;};node_1(){ switch __resume 1;};node_2(){
switch __no_sb 2;};node_3(){ switch __debug 3;};node_4(){ value VARIANT a;}
node_5(){ optional 0 1 2 3;};node_6(){ sequence 5 4;};cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:29:36}" >&2;exit 1;}'
local varnames=(__setup_admin __resume __no_sb __debug VARIANT) varname;for \
varname in "${varnames[@]}"; do unset "var_$varname";done;parse 6 "$@";local \
p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset "$p$varname"
done;eval $p'__setup_admin=${var___setup_admin:-};'$p'__resume=${var___resume:'\
'-false};'$p'__no_sb=${var___no_sb:-false};'$p'__debug=${var___debug:-false};'\
$p'VARIANT=${var_VARIANT:-};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && \
docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; \
do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' bootstrap`
  eval "$(docopt "$@")"

  # shellcheck disable=SC2154
  local DEBUG=$__debug DOCKER_PLATFORM
  ! $DEBUG || LOGLEVEL=${LOGLEVEL:-verbose}
  case $VARIANT in
    amd64) DOCKER_PLATFORM=linux/amd64 ;;
    arm64|rpi*) DOCKER_PLATFORM=linux/arm64 ;;
    *) fatal "Unknown variant: %s" "$VARIANT" ;;
  esac

  local artifacts
  artifacts=$PKGROOT/images/$VARIANT.tmp
  # shellcheck disable=SC2154
  if ! $__resume; then
    $DEBUG || trap_append "rm -rf \"$artifacts\"" EXIT
    rm -rf "$artifacts"
    mkdir -p "$artifacts"

    local bundle
    bundle=$(mktemp --suffix '-phxc-bundle.tar.gz')
    trap_append "rm \"$bundle\"" EXIT
    "$PKGROOT/bootstrap/scripts/bundle.sh" "$bundle"

    local bootstrap_docker_opts=()
    [[ -z $__setup_admin ]] || bootstrap_docker_opts+=(-v "$(realpath "$__setup_admin"):/workspace/cluster.json:rw")

    info "Building '%s'" "node:$VARIANT"
    docker run --rm -ti \
      --platform "$DOCKER_PLATFORM" \
      -v "$PKGROOT/workloads/bootstrap/Dockerfile:/workspace/context/Dockerfile:ro" \
      -v "$bundle:/workspace/bundle/phxc.tar.gz:ro" \
      -v "$artifacts:/workspace/artifacts:rw" \
      "${bootstrap_docker_opts[@]}" \
      gcr.io/kaniko-project/executor:latest \
      --dockerfile context/Dockerfile \
      --build-arg "VARIANT=$VARIANT" \
      --build-arg "DEBUG=$DEBUG" \
      --build-arg "LOGLEVEL=$LOGLEVEL" \
      --custom-platform="$DOCKER_PLATFORM" \
      --destination "cluster.local/node:$VARIANT" \
      --insecure-registry=cluster.local \
      --tar-path "/workspace/artifacts/node.tar" \
      --no-push
  elif [[ ! -e $artifacts/node.tar ]]; then
    fatal "%s does not exist, unable to run create-boot-image" "$artifacts/node.tar"
  fi

  local create_boot_docker_opts=()
  # shellcheck disable=SC2154
  if ! $__no_sb && [[ -e $HOME/.config/phxc/secureboot.key ]]; then
    create_boot_docker_opts+=(-v "$HOME/.config/phxc/secureboot.key:/workspace/secureboot/tls.key")
  fi
  if ! $__no_sb && [[ -e $HOME/.config/phxc/secureboot.crt ]]; then
    create_boot_docker_opts+=(-v "$HOME/.config/phxc/secureboot.crt:/workspace/secureboot/tls.crt")
  fi

  docker run --rm -ti \
    -v "$PKGROOT/workloads/bootstrap/scripts:/scripts:ro" \
    -v "$artifacts:/workspace/artifacts:rw" "${create_boot_docker_opts[@]}" \
    -e "VARIANT=$VARIANT" \
    -e "DEBUG=$DEBUG" \
    -e "LOGLEVEL=$LOGLEVEL" \
    --entrypoint /scripts/create-boot-image.sh \
    "$DISK_UTILS_IMG" --chown $UID

  rm -rf "$PKGROOT/images/$VARIANT.old"
  [[ ! -e "$PKGROOT/images/$VARIANT" ]] || mv "$PKGROOT/images/$VARIANT" "$PKGROOT/images/$VARIANT.old"
  mv "$artifacts" "$PKGROOT/images/$VARIANT"
}

main "$@"
