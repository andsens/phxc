#!/usr/bin/env bash
# shellcheck source-path=..
set -eo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
source "$PKGROOT/.upkg/records.sh/records.sh"

CONFIG_DIR=$HOME/.config/phxc
KUBE_API_SERVER_CA_CRT=$CONFIG_DIR/kube-api-server-ca.crt
KUBE_API_CLIENT_CA_CRT=$CONFIG_DIR/kube-api-client-ca.crt
SECUREBOOT_KEY=$CONFIG_DIR/secureboot.key
SECUREBOOT_CRT=$CONFIG_DIR/secureboot.crt

main() {
  DOC="phxc - Phoenix Cluster management tool
Usage:
  phxc setup [-k KN -u UN] KUBEAPI_HOSTNAME
  phxc bootstrap [--wait|--update] VARIANT
  phxc update-nodes (all | NODE...)
  phxc recovery-keys
  phxc embed-configs IMAGE CLUSTER [NODE [RPIOTP]]
  phxc get-kube-cert [-k KN -u UN] KUBEAPI_HOSTNAME

Options:
  -u --username=UN     K8S username to authenticate as [default: system:admin]
  -k --ssh-keyname=KN  SSH key to use for authentication [default: \$USER@\$HOST]
  --wait               Wait for completion
  --update             Update all nodes when completed

Commands:
  setup           - Setup the Phoenix Cluster root trust and configure kubectl
  bootstrap       - Manually start a bootstrap job for VARIANT
  update-node     - Update the node with the latest bootstrapped image
  recovery-keys   - Show the disk-encryption recovery keys
  embed-configs   - Embed configuration in the FAT32 partition of a disk image
  get-kube-cert   - Issue or refresh a client cert for use with kubectl
"
# docopt parser below, refresh this parser with `docopt.sh phxc`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:993};usage=${DOC:39:253}
digest=ef3ae;options=('-k --ssh-keyname 1' '-u --username 1' ' --wait 0' ' --u'\
'pdate 0');node_0(){ value __ssh_keyname 0;};node_1(){ value __username 1;}
node_2(){ switch __wait 2;};node_3(){ switch __update 3;};node_4(){ value \
KUBEAPI_HOSTNAME a;};node_5(){ value VARIANT a;};node_6(){ value NODE a true;}
node_7(){ value IMAGE a;};node_8(){ value CLUSTER a;};node_9(){ value RPIOTP a;}
node_10(){ switch setup a:setup;};node_11(){ switch bootstrap a:bootstrap;}
node_12(){ switch update_nodes a:update-nodes;};node_13(){ switch all a:all;}
node_14(){ switch recovery_keys a:recovery-keys;};node_15(){ switch \
embed_configs a:embed-configs;};node_16(){ switch get_kube_cert a:get-kube-cert
};node_17(){ sequence 10 18 4;};node_18(){ optional 0 1;};node_19(){ sequence \
11 20 5;};node_20(){ optional 21;};node_21(){ choice 2 3;};node_22(){ sequence \
12 23;};node_23(){ choice 13 24;};node_24(){ repeatable 6;};node_25(){
sequence 15 7 8 26;};node_26(){ optional 6 9;};node_27(){ sequence 16 18 4;}
node_28(){ choice 17 19 22 14 25 27;};cat <<<' docopt_exit() { [[ -n $1 ]] && \
printf "%s\n" "$1" >&2;printf "%s\n" "${DOC:39:253}" >&2;exit 1;}';local \
varnames=(__ssh_keyname __username __wait __update KUBEAPI_HOSTNAME VARIANT \
NODE IMAGE CLUSTER RPIOTP setup bootstrap update_nodes all recovery_keys \
embed_configs get_kube_cert) varname;for varname in "${varnames[@]}"; do unset \
"var_$varname";done;parse 28 "$@";local p=${DOCOPT_PREFIX:-''};for varname in \
"${varnames[@]}"; do unset "$p$varname";done;if declare -p var_NODE >/dev/null \
2>&1; then eval $p'NODE=("${var_NODE[@]}")';else eval $p'NODE=()';fi;eval $p'_'\
'_ssh_keyname=${var___ssh_keyname:-'"'"'$USER@$HOST'"'"'};'$p'__username=${var'\
'___username:-system:admin};'$p'__wait=${var___wait:-false};'$p'__update=${var'\
'___update:-false};'$p'KUBEAPI_HOSTNAME=${var_KUBEAPI_HOSTNAME:-};'$p'VARIANT='\
'${var_VARIANT:-};'$p'IMAGE=${var_IMAGE:-};'$p'CLUSTER=${var_CLUSTER:-};'$p'RP'\
'IOTP=${var_RPIOTP:-};'$p'setup=${var_setup:-false};'$p'bootstrap=${var_bootst'\
'rap:-false};'$p'update_nodes=${var_update_nodes:-false};'$p'all=${var_all:-fa'\
'lse};'$p'recovery_keys=${var_recovery_keys:-false};'$p'embed_configs=${var_em'\
'bed_configs:-false};'$p'get_kube_cert=${var_get_kube_cert:-false};';local \
docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' phxc`
  eval "$(docopt "$@")"

  export KUBECONFIG
  [ -n "$KUBECONFIG" ] || export KUBECONFIG="$HOME/.kube/config.yaml"
  grep -q "$HOME/.kube/phxc.yaml" <<<"$KUBECONFIG" || KUBECONFIG=$KUBECONFIG:$HOME/.kube/phxc.yaml

  [[ ! $KUBEAPI_HOSTNAME =~ ^(https?://)?([^:]+) ]] || KUBEAPI_HOSTNAME=${BASH_REMATCH[2]}
  [[ $__ssh_keyname != "\$USER@\$HOST" ]] || __ssh_keyname=$(id -un)@$(hostname)

  # shellcheck disable=SC2153,SC2154
  if $setup; then
    setup "$KUBEAPI_HOSTNAME" "$__ssh_keyname" "$__username"
  elif $get_kube_cert; then
    get_kube_client_cert "$KUBEAPI_HOSTNAME" "$__ssh_keyname" "$__username"
  elif $embed_configs; then
    embed_configs "$IMAGE" "$CLUSTER" "$NODE" "$RPIOTP"
  elif $recovery_keys; then
    recovery_keys
  elif $bootstrap; then
    bootstrap "$VARIANT" "$__wait" "$__update"
  elif $update_nodes; then
    nodes=()
    if $all; then
      # shellcheck disable=SC2207
      nodes=($(kubectl --context phxc get nodes -ojsonpath='{.items[*].metadata.name}'))
    else
      nodes=("${NODE[@]}")
    fi
    update_nodes "${nodes[@]}"
  fi
}

setup() {
  local kube_api_hostname=$1 ssh_keyname=$2 username=$3
  local yesno remote_kube_api_server_ca_fp kube_api_server_ca_fp
  trap 'error "Failed to configure, run with LOGLEVEL=verbose to see more detailed errors"' ERR
  mkdir -p "$CONFIG_DIR"
  remote_kube_api_server_ca=$(curl -k --no-progress-meter "https://$kube_api_hostname:9000/roots.pem")
  # TOFU for Kubernetes API Server CA
  remote_kube_api_server_ca_fp=$(step certificate fingerprint /dev/stdin <<<"$remote_kube_api_server_ca")
  if [[ -e "$KUBE_API_SERVER_CA_CRT" ]]; then
    info "Checking existing Kubernetes API server CA certificate"
    local kube_api_server_ca_fp
    kube_api_server_ca_fp=$(step certificate fingerprint "$KUBE_API_SERVER_CA_CRT")
    if [[ $remote_kube_api_server_ca_fp != "$kube_api_server_ca_fp" ]]; then
      printf "Saved fingerprint:  %s\n" "$remote_kube_api_server_ca_fp" >&2
      printf "Remote fingerprint: %s\n" "$kube_api_server_ca_fp" >&2
      error "The saved Kubernetes API server CA certificate fingerprint does not match the one from the server!"
      [[ $(read -rp 'Are you sure you want to continue? [y/N]' yesno; echo "$yesno") =~ ^[Yy](es)?$ ]] || { trap '' ERR; fatal "User aborted operation"; }
    fi
  else
    warning "No trust has been established with this Kubernetes cluster yet.\nThe root certificate fingerprint is %s" "$remote_kube_api_server_ca_fp"
    [[ $(read -rp 'Do you want to establish that trust now? [y/N]' yesno; echo "$yesno") =~ ^[Yy](es)?$ ]] || { trap '' ERR; fatal "User aborted operation"; }
  fi
  printf "%s\n" "$remote_kube_api_server_ca" >"$KUBE_API_SERVER_CA_CRT"

  info "Downloading Kubernetes API Client CA certificate"
  curl -k --no-progress-meter "https://$kube_api_hostname:9001/roots.pem" >"$KUBE_API_CLIENT_CA_CRT" 2> >(LOGPROGRAM=curl pipe_verbose)

  create_kube_config "$kube_api_hostname" "$ssh_keyname" "$username"
  trust_ssh_host_key
  create_secureboot_key
}

create_kube_config() {
  local kube_api_hostname=$1 ssh_keyname=$2 username=$3 kube_cfg_path=$HOME/.kube/phxc.yaml kube_context=phxc kube_cluster=phxc
  info "Setting up %s" "${kube_cfg_path//"$HOME"/"~"}"
  kubectl config --kubeconfig "$kube_cfg_path" set-cluster "$kube_cluster" \
    --server="https://$kube_api_hostname:6443" \
    --embed-certs \
    --certificate-authority="$KUBE_API_SERVER_CA_CRT"
  kubectl config --kubeconfig "$kube_cfg_path" set-credentials "$username@$kube_cluster" \
    --exec-api-version="client.authentication.k8s.io/v1beta1" \
    --exec-command="$(realpath "${BASH_SOURCE[0]}")" \
    --exec-arg="get-kube-cert" \
    --exec-arg="-k$ssh_keyname" \
    --exec-arg="-u$username" \
    --exec-arg="$kube_api_hostname"
  kubectl config --kubeconfig "$HOME/.kube/config.yaml" set-context $kube_context \
    --cluster "$kube_cluster" --user "$username@$kube_cluster"
  rm -f "$CONFIG_DIR/$username.crt" "$CONFIG_DIR/$username.key"
}

trust_ssh_host_key() {
  local trusted_certs=$HOME/.ssh/phxc_trusted_cert ssh_host_key
  info "Writing SSH host key trust to %s" "${trusted_certs//"$HOME"/"~"}"
  ssh_host_key=$(openssl x509 -noout -pubkey -in "$KUBE_API_SERVER_CA_CRT" | ssh-keygen -f /dev/stdin -i -m PKCS8)
  printf "@cert-authority * %s\n" "$ssh_host_key" >"$trusted_certs"
}

create_secureboot_key() {
  info "Creating secureboot key & certificate"
  if [[ -e $SECUREBOOT_KEY ]]; then
    info "Secureboot key already exists at %s, not overwriting" "$SECUREBOOT_KEY"
  else
    openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out "$SECUREBOOT_KEY"
  fi
  if [[ -e $SECUREBOOT_CRT ]]; then
    info "Secureboot certificate already exists at %s, not overwriting" "$SECUREBOOT_CRT"
  else
    openssl req -key "$SECUREBOOT_KEY" -x509 -nodes -out "$SECUREBOOT_CRT" -sha256 -days $((20*365)) \
      -subj "/CN=Phoenix Cluster Secureboot"
  fi
  info "Uploading secureboot key & certificate to cluster"
  local sb_files
  sb_files=$(mktemp -d --suffix -phxc-sb)
  # shellcheck disable=SC2064
  trap "rm -rf \"$sb_files\"" EXIT
  ln -s "$SECUREBOOT_KEY" "$sb_files/tls.key"
  ln -s "$SECUREBOOT_CRT" "$sb_files/tls.crt"
  kubectl --context phxc -n phxc create secret tls secureboot --key="$SECUREBOOT_KEY" --cert="$SECUREBOOT_CRT"
}

get_kube_client_cert() {
  local kube_api_hostname=$1 ssh_keyname=$2 username=$3 cert key
  renew_kube_client_cert "$kube_api_hostname" "$ssh_keyname" "$username"
  cert=$(cat "$CONFIG_DIR/$username.crt")
  key=$(cat "$CONFIG_DIR/$username.key")
  printf '{
  "apiVersion": "client.authentication.k8s.io/v1beta1",
  "kind": "ExecCredential",
  "status": {
    "clientCertificateData": "%s",
    "clientKeyData": "%s"
  }
}
' "${cert//$'\n'/'\n'}" "${key//$'\n'/'\n'}"
}

renew_kube_client_cert() {
  local kube_api_hostname=$1 ssh_keyname=$2 username=$3 ca_url
  trap 'error "Failed to get certificate, run with LOGLEVEL=verbose to see more detailed errors"' ERR
  ca_url=https://${kube_api_hostname}:9001
  if [[ ! -e $CONFIG_DIR/$username.crt ]] || \
      step certificate needs-renewal --expires-in 0s "$CONFIG_DIR/$username.crt" 2>&1 | LOGPROGRAM=step pipe_verbose; then
    debug "Renewing client certificate"
    local ssh_pem admin_jwk kid header payload signature step_logs
    ssh_pem=$(step kms key "sshagentkms:$ssh_keyname" 2> >(LOGPROGRAM=step pipe_verbose))
    admin_jwk=$(step crypto jwk create --force --use sig --from-pem=<(printf "%s\n" "$ssh_pem") \
      /dev/stdout /dev/null 2> >(LOGPROGRAM=step pipe_verbose))
    kid=$(jq -r .kid <<<"$admin_jwk")
    header=$(jq '{
      "alg": .alg,
      "kid": .kid,
      "typ": "JWT"
    }' <<<"$admin_jwk" | jq -cS . | base64 -w0 | tr -d '=' | tr '/+' '_-')
    payload=$(jq -n --arg ca_url "$ca_url" --argjson now "$(date +%s)" --arg kid "$kid" \
                    --arg jti "$(openssl rand -hex 32)" --arg sub "$username" '{
      "aud": ($ca_url + "/1.0/sign"),
      "exp": ($now + 30),
      "iat": $now,
      "iss": $kid,
      "jti": $jti,
      "nbf": ($now - 30),
      "sans": [$sub],
      "sub": $sub
    }' | jq -cS . | base64 -w0 | tr -d '=' | tr '/+' '_-')
    signature=$(step kms sign --format jws --in <(printf "%s.%s" "$header" "$payload") \
      --kms "sshagentkms" "sshagentkms:$ssh_keyname")
    if ! step_logs=$(step ca certificate --ca-url="$ca_url" --root="$KUBE_API_CLIENT_CA_CRT" \
      --token="$header.$payload.$signature" --force \
      "$username" "$CONFIG_DIR/$username.crt" "$CONFIG_DIR/$username.key" 2>&1); then
      fatal "Failed to issue kube-api certificate:\n%s" "$step_logs"
    fi
  fi
}

embed_configs() {
  local image=$1 cluster=$2 node=$3 rpi_otp=$4 config_tmp
  config_tmp=$(mktemp -d --suffix '-phxc-embed-configs')
  # shellcheck disable=SC2064
  trap "rm -rf \"$config_tmp\"" EXIT
  # shellcheck disable=SC2154
  cp "$cluster" "$config_tmp/cluster.json"
  [[ -z $node ]] || cp "$node" "$config_tmp/node.json"
  [[ -z $rpi_otp ]] || cp "$rpi_otp" "$config_tmp/rpi-otp.json"
  local admin_ssh_key config_path
  admin_ssh_key=$(jq -r '.admin["ssh-keys"][0]' "$config_tmp/cluster.json")
  for config_path in "$config_tmp"/*; do
    ssh-keygen -Y sign -f <(printf "%s" "$admin_ssh_key") -n file "$config_path"
  done

  docker run --rm -ti \
    -v "$config_tmp:/workspace/embed-configs" \
    -v "$PKGROOT/scripts:/scripts:ro" \
    -v "$(realpath "$image"):/workspace/disk.img:rw" \
    -e "DEBUG=$DEBUG" \
    --device=/dev/kvm \
    --group-add "$(stat -c %g /dev/kvm)" \
    ghcr.io/andsens/phxc-embed-configs:sha-3e0c5ff
}

recovery_keys() {
  printf -- "# Phoenix Cluster disk encryption recovery keys\n"
  for secret in $(kubectl --context phxc -n phxc get secret -oname); do
    [[ $secret != secret/diskenc-recovery-* ]] || \
      printf -- "%s: %s\n" \
        "${secret#'secret/diskenc-recovery-'}" \
        "$(kubectl --context phxc -n phxc get "$secret" -ojsonpath='{.data.disk-encryption-recovery\.key}' | base64 -d)"
  done
}

bootstrap() {
  local variant=$1 wait=$2 update=$3 job_name
  job_name="build-$variant-$(date --utc +%Y%m%d%H%M%S)"
  info "Creating job %s" "$job_name"
  kubectl --context phxc -n phxc create job --from="cronjob/build-$variant" "$job_name"
  if $wait || $update; then
    info "Waiting for %s to complete" "$job_name"
    kubectl --context phxc -n phxc wait --timeout=-1s --for=condition=Complete job "$job_name"
    info "Bootstrap job for %s completed" "$variant"
  fi
  # shellcheck disable=SC2046
  if $update; then
    info "Updating all nodes"
    update_nodes $(kubectl --context phxc get nodes -ojsonpath='{.items[*].metadata.name}')
  fi
}

update_nodes() {
  local nodes=("$@") node hostname skipped_nodes=() unschedulable
  if ! kubectl get node -ojson | jq -e '[.items[] | select(.spec.unschedulable)] | length == 0' >/dev/null; then
    fatal "Unable to update any nodes. Some nodes are currently unschedulable"
  fi
  for node in "${nodes[@]}"; do
    hostname=$(kubectl --context phxc get node "$node" -ojsonpath='{.metadata.labels.kubernetes\.io/hostname}')
    info "Updating %s" "$node"
    LC_ALL=C ssh "admin@$hostname" -- sudo systemctl start --no-block update-boot
    # shellcheck disable=SC2064
    LC_ALL=C ssh "admin@$node" -- bash -ec '"start_time=\$(date \"+%Y-%m-%d %H:%M:%S %z\")
      journalctl -fu update-boot --since=\"\$start_time\" --output=cat & trap \"kill \$!\" EXIT
      sudo systemctl start update-boot
      sleep 2"' # Wait until the last few log entries are flushed
    if [[ $(kubectl get node "$node" -ojsonpath='{.spec.unschedulable}' 2>/dev/null) != 'true' ]]; then
      skipped_nodes+=("$node")
      continue
    fi
    # Node may be single master
    until unschedulable=$(kubectl get node "$node" -ojsonpath='{.spec.unschedulable}' 2>/dev/null) && [[ $unschedulable != 'true' ]]; do
      sleep 10
    done
  done
  if [[ ${#skipped_nodes[@]} -gt 0 ]]; then
    warning "Some nodes were not updated, see the logs above for details. The skipped nodes were:\n%s" "${skipped_nodes[*]}"
  fi
}

main "$@"
