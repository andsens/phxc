#!/usr/bin/env bash
# shellcheck source-path=..
set -eo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
source "$PKGROOT/.upkg/records.sh/records.sh"

CONFIG_DIR=$HOME/.config/phxc
KUBE_API_SERVER_CA_CRT=$CONFIG_DIR/kube-api-server-ca.crt
KUBE_API_CLIENT_CA_CRT=$CONFIG_DIR/kube-api-client-ca.crt

main() {
  DOC="phxc - Phoenix Cluster management tool
Usage:
  phxc setup [-k KN -u UN] KUBEAPI_HOSTNAME
  phxc embed-configs IMAGE CLUSTER [NODE [RPIOTP]]
  phxc get-kube-cert [-k KN -u UN] KUBEAPI_HOSTNAME

Options:
  -u --username=UN     K8S username to authenticate as [default: system:admin]
  -k --ssh-keyname=KN  SSH key to use for authentication [default: \$USER@\$HOST]

Commands:
  setup         - Setup the Phoenix Cluster root trust and configure kubectl
  embed-configs - Embed configuration in the FAT32 partition of a disk image
  get-kube-cert - Issue or refresh a client cert for use with kubectl
"
# docopt parser below, refresh this parser with `docopt.sh phxc`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:596};usage=${DOC:39:153}
digest=fb628;options=('-k --ssh-keyname 1' '-u --username 1');node_0(){ value \
__ssh_keyname 0;};node_1(){ value __username 1;};node_2(){ value \
KUBEAPI_HOSTNAME a;};node_3(){ value IMAGE a;};node_4(){ value CLUSTER a;}
node_5(){ value NODE a;};node_6(){ value RPIOTP a;};node_7(){ switch setup \
a:setup;};node_8(){ switch embed_configs a:embed-configs;};node_9(){ switch \
get_kube_cert a:get-kube-cert;};node_10(){ sequence 7 11 2;};node_11(){
optional 0 1;};node_12(){ sequence 8 3 4 13;};node_13(){ optional 5 6;}
node_14(){ sequence 9 11 2;};node_15(){ choice 10 12 14;};cat <<<' \
docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:39:153}" >&2;exit 1;}';local varnames=(__ssh_keyname __username \
KUBEAPI_HOSTNAME IMAGE CLUSTER NODE RPIOTP setup embed_configs get_kube_cert) \
varname;for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 15 \
"$@";local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;eval $p'__ssh_keyname=${var___ssh_keyname:-'\
"'"'$USER@$HOST'"'"'};'$p'__username=${var___username:-system:admin};'$p'KUBEA'\
'PI_HOSTNAME=${var_KUBEAPI_HOSTNAME:-};'$p'IMAGE=${var_IMAGE:-};'$p'CLUSTER=${'\
'var_CLUSTER:-};'$p'NODE=${var_NODE:-};'$p'RPIOTP=${var_RPIOTP:-};'$p'setup=${'\
'var_setup:-false};'$p'embed_configs=${var_embed_configs:-false};'$p'get_kube_'\
'cert=${var_get_kube_cert:-false};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 \
]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in \
"${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' phxc`
  eval "$(docopt "$@")"
  [[ ! $KUBEAPI_HOSTNAME =~ ^(https?://)?([^:]+) ]] || KUBEAPI_HOSTNAME=${BASH_REMATCH[2]}
  [[ $__ssh_keyname != "\$USER@\$HOST" ]] || __ssh_keyname=$USER@$HOST
  # shellcheck disable=SC2153,SC2154
  if $setup; then
    setup "$KUBEAPI_HOSTNAME" "$__ssh_keyname" "$__username"
  elif $get_kube_cert; then
    get_kube_client_cert "$KUBEAPI_HOSTNAME" "$__ssh_keyname" "$__username"
  elif $embed_configs; then
    embed_configs "$IMAGE" "$CLUSTER" "$NODE" "$RPIOTP"
  fi
}

setup() {
  local kube_api_hostname=$1 ssh_keyname=$2 username=$3
  local yesno kube_api_server_ca_crt_fp kube_api_server_ca_crt_fp
  trap 'error "Failed to configure, run with LOGLEVEL=verbose to see more detailed errors"' ERR
  mkdir -p "$CONFIG_DIR"
  # TOFU for Kubernetes API Server CA
  kube_api_server_ca_crt=$(step certificate inspect --insecure --format pem "https://$kube_api_hostname:6443")
  kube_api_server_ca_crt_fp=$(step certificate fingerprint <(printf "%s\n" "$kube_api_server_ca_crt"))
  if [[ -e "$KUBE_API_SERVER_CA_CRT" ]]; then
    info "Checking existing Kubernetes API server CA certificate"
    local remote_kube_api_server_ca_crt_fp
    remote_kube_api_server_ca_crt_fp=$(step certificate fingerprint "$KUBE_API_SERVER_CA_CRT")
    if [[ $kube_api_server_ca_crt_fp != "$remote_kube_api_server_ca_crt_fp" ]]; then
      printf "Saved fingerprint:  %s\n" "$kube_api_server_ca_crt_fp" >&2
      printf "Remote fingerprint: %s\n" "$remote_kube_api_server_ca_crt_fp" >&2
      error "The saved Kubernetes API server CA certificate fingerprint does not match the one from the server!"
      [[ $(read -rp 'Are you sure you want to continue? [y/N]' yesno; echo "$yesno") =~ ^[Yy](es)?$ ]] || { trap '' ERR; fatal "User aborted operation"; }
    fi
  else
    warning "No trust has been established with this Kubernetes cluster yet.\nThe root certificate fingerprint is %s" "$kube_api_server_ca_crt_fp"
    [[ $(read -rp 'Do you want to establish that trust now? [y/N]' yesno; echo "$yesno") =~ ^[Yy](es)?$ ]] || { trap '' ERR; fatal "User aborted operation"; }
  fi
  printf "%s\n" "$kube_api_server_ca_crt" >"$KUBE_API_SERVER_CA_CRT"

  info "Downloading Kubernetes API Client CA certificate"
  curl -sk --no-progress-meter https://k8s-hyperv-1.local:9001/roots.pem >"$KUBE_API_CLIENT_CA_CRT"

  create_kube_config "https://$kube_api_hostname:6443" "$ssh_keyname" "$username"
}

create_kube_config() {
  local kube_api_addr=$1 ssh_keyname=$2 username=$3 kube_cfg_path=$HOME/.kube/phxc.yaml kube_context=phxc kube_cluster=phxc kube_api_addr
  info "Setting up %s" "$kube_cfg_path"
  kubectl config --kubeconfig "$kube_cfg_path" set-cluster "$kube_cluster" \
    --server="$kube_api_addr" \
    --embed-certs \
    --certificate-authority="$KUBE_API_SERVER_CA_CRT"
  kubectl config --kubeconfig "$kube_cfg_path" set-credentials "$username@$kube_cluster" \
    --exec-api-version="client.authentication.k8s.io/v1beta1" \
    --exec-command="$(realpath "${BASH_SOURCE[0]}")" \
    --exec-arg="get-kube-cert" \
    --exec-arg="-k$ssh_keyname" \
    --exec-arg="-u$username" \
    --exec-arg="$kube_api_addr"
  kubectl config --kubeconfig "$kube_cfg_path" set-context $kube_context \
    --cluster "$kube_cluster" --user "$username@$kube_cluster"
  rm -f "$CONFIG_DIR/$username.crt" "$CONFIG_DIR/$username.key"
}

get_kube_client_cert() {
  local kube_api_addr=$1 ssh_keyname=$2 username=$3 cert key
  refresh_cert "$kube_api_addr" "$ssh_keyname" "$username"
  cert=$(cat "$CONFIG_DIR/$username.crt")
  key=$(cat "$CONFIG_DIR/$username.key")
  printf '{
  "apiVersion": "client.authentication.k8s.io/v1beta1",
  "kind": "ExecCredential",
  "status": {
    "clientCertificateData": "%s",
    "clientKeyData": "%s"
  }
}
' "${cert//$'\n'/'\n'}" "${key//$'\n'/'\n'}"
}

refresh_cert() {
  local kube_api_addr=$1 ssh_keyname=$2 username=$3 ca_url
  trap 'error "Failed to get certificate, run with LOGLEVEL=verbose to see more detailed errors"' ERR
  ca_url=https://${kube_api_addr}:9001
  if [[ ! -e $CONFIG_DIR/$username.crt ]] || \
      step certificate needs-renewal --expires-in 0s "$CONFIG_DIR/$username.crt" 2>&1 | LOGPROGRAM=step pipe_verbose; then
    local ssh_pem admin_jwk kid header payload signature step_logs
    ssh_pem=$(step kms key "sshagentkms:$ssh_keyname" 2> >(LOGPROGRAM=step pipe_verbose))
    admin_jwk=$(step crypto jwk create --force --use sig --from-pem=<(printf "%s\n" "$ssh_pem") \
      /dev/stdout /dev/null 2> >(LOGPROGRAM=step pipe_verbose))
    kid=$(jq -r .kid <<<"$admin_jwk")
    header=$(jq '{
      "alg": .alg,
      "kid": .kid,
      "typ": "JWT"
    }' <<<"$admin_jwk" | jq -cS . | base64 -w0 | tr -d '=' | tr '/+' '_-')
    payload=$(jq -n --arg ca_url "$ca_url" --argjson now "$(date +%s)" --arg kid "$kid" \
                    --arg jti "$(openssl rand -hex 32)" --arg sub "$username" '{
      "aud": ($ca_url + "/1.0/sign"),
      "exp": ($now + 30),
      "iat": $now,
      "iss": $kid,
      "jti": $jti,
      "nbf": ($now - 30),
      "sans": [$sub],
      "sub": $sub
    }' | jq -cS . | base64 -w0 | tr -d '=' | tr '/+' '_-')
    signature=$(step kms sign --format jws --in <(printf "%s.%s" "$header" "$payload") \
      --kms "sshagentkms" "sshagentkms:$ssh_keyname")
    if ! step_logs=$(step ca certificate --ca-url="$ca_url" --root="$KUBE_API_CLIENT_CA_CRT" \
      --token="$header.$payload.$signature" --force \
      "$username" "$CONFIG_DIR/$username.crt" "$CONFIG_DIR/$username.key" 2>&1); then
      fatal "Failed to issue kube-api certificate:\n%s" "$step_logs"
    fi
  fi
}

embed_configs() {
  local image=$1 cluster=$2 node=$3 rpi_otp=$4 config_tmp
  config_tmp=$(mktemp -d --suffix '-phxc-embed-configs')
  # shellcheck disable=SC2064
  trap "rm -rf \"$config_tmp\"" EXIT
  # shellcheck disable=SC2154
  cp "$cluster" "$config_tmp/cluster.json"
  [[ -z $node ]] || cp "$node" "$config_tmp/node.json"
  [[ -z $rpi_otp ]] || cp "$rpi_otp" "$config_tmp/rpi-otp.json"
  local admin_ssh_key config_path
  admin_ssh_key=$(jq -r '.admin["ssh-keys"][0]' "$config_tmp/cluster.json")
  for config_path in "$config_tmp"/*; do
    ssh-keygen -Y sign -f <(printf "%s" "$admin_ssh_key") -n file "$config_path"
  done

  docker run --rm -ti \
    -v "$config_tmp:/workspace/embed-configs" \
    -v "$PKGROOT/scripts:/scripts:ro" \
    -v "$(realpath "$image"):/workspace/disk.img:rw" \
    -e "DEBUG=$DEBUG" \
    --device=/dev/kvm \
    --group-add "$(stat -c %g /dev/kvm)" \
    ghcr.io/andsens/phxc-embed-configs:sha-3e0c5ff
}

main "$@"
