---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
rules:
- apiGroups: [""]
  resources: [services]
  verbs: [get]
- apiGroups: [""]
  resources: [secrets]
  verbs: [create]
- apiGroups: [""]
  resources: [secrets]
  resourceNames:
  - kube-server-issuer-provisioner
  - kube-server-issuer-provisioner-password
  - ssh-host-provisioner
  - ssh-host-provisioner-password
  verbs: [get, delete]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-server-ca
subjects:
- kind: ServiceAccount
  name: kube-server-ca
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
rules:
- apiGroups: [certmanager.step.sm]
  resources: [stepclusterissuers]
  verbs: [create]
- apiGroups: [certmanager.step.sm]
  resources: [stepclusterissuers]
  resourceNames: [kube-server-issuer]
  verbs: [get, patch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-server-ca
subjects:
- kind: ServiceAccount
  name: kube-server-ca
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: smallstep
      app.kubernetes.io/component: kube-server-ca
  ingress:
  - toPorts:
    - ports:
      - port: "9000"
    fromEntities:
    - all
---
apiVersion: v1
kind: Service
metadata:
  name: kube-server-ca-host
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
  ports:
  - name: api
    port: 9000
    nodePort: 9000
    targetPort: api
---
apiVersion: v1
kind: Service
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
  ports:
  - name: api
    port: 9000
    targetPort: api
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kube-server-ca
  labels:
    app.kubernetes.io/name: smallstep
    app.kubernetes.io/component: kube-server-ca
spec:
  serviceName: kube-server-ca
  selector:
    matchLabels:
      app.kubernetes.io/name: smallstep
      app.kubernetes.io/component: kube-server-ca
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smallstep
        app.kubernetes.io/component: kube-server-ca
        cluster.local/allow-apiserver-egress: "true"
    spec:
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      serviceAccountName: kube-server-ca
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: setup-kube-server-ca-config
        image: ghcr.io/andsens/phxc-utils
        command: [/home/step/scripts/setup-kube-server-ca-config.sh]
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: scripts
          mountPath: /home/step/scripts
        - name: config
          mountPath: /home/step/config-ro
        - name: kube-server-ca-cert
          mountPath: /home/step/kube-api-secrets/kube_apiserver_server_ca.crt
          readOnly: true
        - name: kube-server-ca-key
          mountPath: /home/step/kube-api-secrets/kube_apiserver_server_ca_key
          readOnly: true
        - name: secrets
          mountPath: /home/step/secrets
        - name: config-rw
          mountPath: /home/step/config
        - name: setup-secrets
          mountPath: /home/step/setup-secrets
      containers:
      - name: step-ca
        image: cr.step.sm/smallstep/step-ca:0.27.2
        command: [/usr/local/bin/step-ca]
        args: [/home/step/config/ca.json]
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - name: api
          containerPort: 9000
        livenessProbe:
          httpGet:
            path: /health
            port: api
            scheme: HTTPS
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: api
            scheme: HTTPS
          initialDelaySeconds: 5
        volumeMounts:
        - name: secrets
          mountPath: /home/step/secrets
          readOnly: true
        - name: config-rw
          mountPath: /home/step/config
        - name: database
          mountPath: /home/step/db
      volumes:
      - name: scripts
        configMap:
          name: scripts
          defaultMode: 0755
      - name: config
        configMap:
          name: ca-configs
      - name: secrets
        emptyDir:
          medium: Memory
      - name: setup-secrets
        emptyDir:
          medium: Memory
      - name: kube-server-ca-cert
        hostPath:
          path: /var/lib/rancher/k3s/server/tls/server-ca.crt
          type: File
      - name: kube-server-ca-key
        hostPath:
          path: /var/lib/rancher/k3s/server/tls/server-ca.key
          type: File
      - name: config-rw
        emptyDir: {}
      - name: database
        emptyDir: {}
